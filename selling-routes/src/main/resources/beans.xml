<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://cxf.apache.org/jaxrs
        http://cxf.apache.org/schemas/jaxrs.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core.xsd
        http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd
        http://camel.apache.org/schema/cxf
        http://camel.apache.org/schema/cxf/camel-cxf.xsd
    ">

    <context:annotation-config/>
    <context:component-scan base-package="com.ba.captwo.eda.demo"/>
    <context:component-scan base-package="com.ba.captwo.eda.demo.resources"/>
    <context:component-scan base-package="com.ba.captwo.eda.demo.routes"/>
    <context:component-scan base-package="com.ba.captwo.eda.demo.processors"/>

    <context:property-placeholder system-properties-mode="OVERRIDE" location="classpath*:*.properties"/>

    <jaxrs:server id="services" address="/">
        <jaxrs:serviceBeans>
            <bean class="com.ba.captwo.eda.demo.resources.PersonRouteResource"/>
            <bean class="com.ba.captwo.eda.demo.resources.PersonServiceResource"/>
            <bean class="com.ba.captwo.eda.demo.resources.ReservationResource"/>
            <bean class="com.ba.captwo.eda.demo.resources.FlightEventResource"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
        </jaxrs:providers>
    </jaxrs:server>

    <cxf:rsServer id="flightEventServer" address="/flightevent"
                  serviceClass="com.ba.captwo.eda.demo.resources.FlightEventResource"/>

    <cxf:rsServer id="reservationServer" address="/reservation"
                  serviceClass="com.ba.captwo.eda.demo.resources.ReservationResource"/>


    <cxf:rsServer id="personServer" address="/person"
                  serviceClass="com.ba.captwo.eda.demo.resources.PersonServiceResource"/>

    <bean id="FlightEventConsumerRoute" class="com.ba.captwo.eda.demo.routes.FlightEventConsumerRoute"/>
    <bean id="ReservationRoute" class="com.ba.captwo.eda.demo.routes.ReservationRoute"/>
    <bean id="PersonServiceRoute" class="com.ba.captwo.eda.demo.routes.PersonServiceRoutes"/>

    <camelContext id="ReservationContext" xmlns="http://camel.apache.org/schema/spring">
        <routeBuilder ref="ReservationRoute"/>
    </camelContext>

    <camelContext id="FlightEventContext" xmlns="http://camel.apache.org/schema/spring">
        <routeBuilder ref="FlightEventConsumerRoute"/>
    </camelContext>

    <camelContext id="PersonServiceContext" xmlns="http://camel.apache.org/schema/spring">
        <routeBuilder ref="PersonServiceRoute"/>
    </camelContext>

    <amq:broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">
        <destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry topic=">" producerFlowControl="true">
                        <pendingMessageLimitStrategy>
                            <constantPendingMessageLimitStrategy limit="1000"/>
                        </pendingMessageLimitStrategy>
                    </policyEntry>
                    <policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">
                    </policyEntry>
                </policyEntries>
            </policyMap>
        </destinationPolicy>
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb"/>
        </persistenceAdapter>
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="64 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="1 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire"
                                uri="tcp://${activemq.broker.listen.address}:${activemq.openwire.listen.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp"
                                uri="amqp://${activemq.broker.listen.address}:${activemq.amqp.listen.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
        </transportConnectors>
    </amq:broker>

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL"
                          value="tcp://${activemq.broker.listen.address}:${activemq.openwire.listen.port}"/>
            </bean>
        </property>
    </bean>

    <bean id="jedisConnectionFactory"
            class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
            p:host-name="${redis.server}"
            p:port="${redis.port}"
            p:use-pool="true"/>

    <bean id="stringRedisSerializer"
            class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <bean id="redisTemplate"
            class="org.springframework.data.redis.core.RedisTemplate"
            p:connection-factory-ref="jedisConnectionFactory"
            p:defaultSerializer-ref="stringRedisSerializer"
            />
</beans>
